{
  "info": {
    "name": "101418340_COMP3123-exec04",
    "_postman_id": "d2e7b5c0-9c5b-4a0a-92b1-101418340exec04",
    "description": "COMP3123 exec04 — Express endpoints + tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    }
  ],
  "item": [
    {
      "name": "GET /hello (plain text)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/hello",
          "host": ["{{baseUrl}}"],
          "path": ["hello"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Body is 'Hello Express JS' (text)\", function () {",
              "  pm.expect(pm.response.text()).to.eql(\"Hello Express JS\");",
              "});",
              "",
              "pm.test(\"Content-Type is text/plain\", function () {",
              "  pm.response.to.have.header(\"Content-Type\");",
              "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "GET /user (defaults, no params)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/user",
          "host": ["{{baseUrl}}"],
          "path": ["user"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "",
              "const json = pm.response.json();",
              "pm.test(\"Defaults to Pritesh Patel\", function () {",
              "  pm.expect(json.firstname).to.eql(\"Pritesh\");",
              "  pm.expect(json.lastname).to.eql(\"Patel\");",
              "});",
              "pm.test(\"Content-Type is application/json\", function () {",
              "  pm.response.to.have.header(\"Content-Type\");",
              "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "GET /user (query params: John,Doe)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/user?firstname=John&lastname=Doe",
          "host": ["{{baseUrl}}"],
          "path": ["user"],
          "query": [
            { "key": "firstname", "value": "John" },
            { "key": "lastname", "value": "Doe" }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "const json = pm.response.json();",
              "pm.test(\"Returns John Doe\", function () {",
              "  pm.expect(json.firstname).to.eql(\"John\");",
              "  pm.expect(json.lastname).to.eql(\"Doe\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "POST /user/:firstname/:lastname (John/Doe)",
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/user/John/Doe",
          "host": ["{{baseUrl}}"],
          "path": ["user", "John", "Doe"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "const json = pm.response.json();",
              "pm.test(\"Echoes John Doe from path\", function () {",
              "  pm.expect(json.firstname).to.eql(\"John\");",
              "  pm.expect(json.lastname).to.eql(\"Doe\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "POST /users (array body)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "[\n  { \"firstname\": \"Pritesh\", \"lastname\": \"Patel\" },\n  { \"firstname\": \"John\", \"lastname\": \"Doe\" },\n  { \"firstname\": \"John\", \"lastname\": \"Rome\" }\n]"
        },
        "url": {
          "raw": "{{baseUrl}}/users",
          "host": ["{{baseUrl}}"],
          "path": ["users"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "const req = JSON.parse(pm.request.body.raw);",
              "const res = pm.response.json();",
              "pm.test(\"Response echoes the same array\", function () {",
              "  pm.expect(res).to.eql(req);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "GET /instruction.html (static file)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/instruction.html",
          "host": ["{{baseUrl}}"],
          "path": ["instruction.html"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Content-Type is text/html\", function () {",
              "  pm.response.to.have.header(\"Content-Type\");",
              "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "POST /users (malformed body) – optional error demo",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "[ { \"firstname\": \"Bad\" \"lastname\": \"Json\" }" 
        },
        "url": {
          "raw": "{{baseUrl}}/users",
          "host": ["{{baseUrl}}"],
          "path": ["users"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// This request intentionally has malformed JSON to capture an error screenshot.",
              "pm.test(\"Expect non-200 on malformed JSON (or server-specific error)\", function () {",
              "  pm.expect([200,201]).to.not.include(pm.response.code);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
